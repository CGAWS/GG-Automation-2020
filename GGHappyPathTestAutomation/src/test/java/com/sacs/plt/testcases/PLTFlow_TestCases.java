package com.sacs.plt.testcases;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;

import org.apache.log4j.Logger;
import org.openqa.selenium.WebDriver;
import org.testng.ITestResult;
import org.testng.Reporter;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.sacs.PageMethods.AdditionalPurchasesPage;
import com.sacs.PageMethods.AirlineOwnedPurchasesPage;
import com.sacs.PageMethods.BasicArticlesPage;
import com.sacs.PageMethods.HomePage;
import com.sacs.PageMethods.LoginPage;
import com.sacs.PageMethods.PurchaseOrderRecieptPage;
import com.sacs.PageMethods.PurchaseOrderRegistrationPage;
import com.sacs.PageMethods.ReturnToVendorPage;
import com.sacs.PageMethods.VendorInvoiceEntryPage;
import com.sacs.PageMethods.VendorsPage;
import com.sacs.PageObjects.VendorsPageObjects;
import com.sacs.Reportinglib.CustomReport;
import com.sacs.beanfactory.BeanFactory;
import com.sacs.dao.AddCreditDebitNoteBeanPage;
import com.sacs.dao.BasicArticlesBeanPage;
import com.sacs.dao.VendorBeanPage;
import com.sacs.funUtils.BasePage;
import com.sacs.funUtils.TestBase;


public class PLTFlow_TestCases extends TestBase{
	
	private static Logger logger = Logger.getLogger(PLTFlow_TestCases.class);
	private LoginPage loginpage;
	private List<String> statusValue;
	private CustomReport customReport;
	private String sTestcaseName;
	private ResourceBundle bundle;
	private Locale locale;
	private BeanFactory accountBeansFactory;
	private BasePage basePage;
	private WebDriver driver;
	
	
	@BeforeClass(alwaysRun = true)
	public void beforeClass(){
		statusValue = new ArrayList<String>();
		customReport = new CustomReport();
		accountBeansFactory = new BeanFactory();
		locale = new Locale(language);
	}
	
	@BeforeMethod(alwaysRun = true)
	@Parameters(value = { "sbrowser", "sgrid"})
	public void setUP() {
		bundle = ResourceBundle.getBundle("ResourceBundle.BundleFile", locale);
		//logger.info("value in bundle is" + bundle.getKeys());
		customReport.reset();
		String username="amastan@gategroup.com";
		String password="Apjak@1930";
	}
	
	@Test
	public void Verify_PLTFLOW_RegularVendor_NonAirline_NonNominated_PO_Invoice_PLTTransfer_TC1() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
	//	basicArticlesPage.refreshBrowser();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
	//	browserQuit(driver);
	}
	
	@Test
	public void Verify_PLTFLOW_RegularVendor_NonAirline_Nominated_Customer_PO_Invoice_PLTTransfer_TC2(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_NominatedCheckBox_SelectCustomer();
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test
	public void Verify_PLTFLOW_RegularVendor_NonAirline_Nominated_GateTrade_PO_Invoice_PLTTransfer_TC3(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_NominatedCheckBox_SelectGateTrade();
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, bundle.getString("fromvendorpriceagreement"));
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_RegularVendor_Airline_NonNominated_PO_TC4(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		String username="amastan@gategroup.com";
		String password="Apjak@1930";
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		basicArticlesPage.create_BasicArticleNonNominated_AirLine_AssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevelForAirLine();
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, bundle.getString("fromvendorpriceagreement"));
		customReport.customizedReport(0, purchaseOrderRegistrationPage.verify_AddArticleCheckbox(), statusValue, driver, sTestcaseName, "Verifying Check box for add article which should not present");
		AirlineOwnedPurchasesPage airlineOwnedPurchasesPage=purchaseOrderRegistrationPage.navigate_AirlineOwnedPurchasesSearch();
		purchaseOrderRegistrationPage.searchAndSelectVendorAirLineOwnedPurchases(vendorname, bundle.getString("connectedtovendor"));
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		purchaseOrderRegistrationPage.very_PORegistartionSubmitted(vendorname);
		customReport.customizedReport(bundle.getString("submittedmessage"), airlineOwnedPurchasesPage.verify_AirLineOwnedPurchasesPOSubmittedText(), statusValue, driver, sTestcaseName, "Verifying AirLine Owned Purchase PO submission message as Submitted");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_RegularVendor_Airline_Nominated_Customer_PO_TC5(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		String username="amastan@gategroup.com";
		String password="Apjak@1930";
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		basicArticlesPage.create_BasicArticleNonNominated_AirLine_AssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_NominatedCheckBox_SelectCustomer();
		basicArticlesPage.click_ApplyChanges();
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevelForAirLine();
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, bundle.getString("fromvendorpriceagreement"));
		customReport.customizedReport(0, purchaseOrderRegistrationPage.verify_AddArticleCheckbox(), statusValue, driver, sTestcaseName, "Verifying Check box for add article which should not present");
		AirlineOwnedPurchasesPage airlineOwnedPurchasesPage=purchaseOrderRegistrationPage.navigate_AirlineOwnedPurchasesSearch();
		purchaseOrderRegistrationPage.searchAndSelectVendorAirLineOwnedPurchases(vendorname, bundle.getString("connectedtovendor"));
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		purchaseOrderRegistrationPage.very_PORegistartionSubmitted(vendorname);
		customReport.customizedReport(bundle.getString("submittedmessage"), airlineOwnedPurchasesPage.verify_AirLineOwnedPurchasesPOSubmittedText(), statusValue, driver, sTestcaseName, "Verifying AirLine Owned Purchase PO submission message as Submitted");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		customReport.checkinglist(statusValue);
		//browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_RegularVendor_Airline_Nominated_GateTrade_PO_TC6(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		String username="amastan@gategroup.com";
		String password="Apjak@1930";
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		basicArticlesPage.create_BasicArticleNonNominated_AirLine_AssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_NominatedCheckBox_SelectGateTrade();
		basicArticlesPage.click_ApplyChanges();
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevelForAirLine();
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, bundle.getString("fromvendorpriceagreement"));
		customReport.customizedReport(0, purchaseOrderRegistrationPage.verify_AddArticleCheckbox(), statusValue, driver, sTestcaseName, "Verifying Check box for add article which should not present");
		AirlineOwnedPurchasesPage airlineOwnedPurchasesPage=purchaseOrderRegistrationPage.navigate_AirlineOwnedPurchasesSearch();
		purchaseOrderRegistrationPage.searchAndSelectVendorAirLineOwnedPurchases(vendorname, bundle.getString("connectedtovendor"));
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		purchaseOrderRegistrationPage.very_PORegistartionSubmitted(vendorname);
		customReport.customizedReport(bundle.getString("submittedmessage"), airlineOwnedPurchasesPage.verify_AirLineOwnedPurchasesPOSubmittedText(), statusValue, driver, sTestcaseName, "Verifying AirLine Owned Purchase PO submission message as Submitted");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		customReport.checkinglist(statusValue);
		//browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_IntercomVendor_NonAirline_NonNominated_PoReceived_Invoice_PLTTransfer_TC7(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		vendorsPage.create_IntercomVendor(vendorbeans);
		String vendorname=vendorbeans.getVendorname();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesbeans.getLocaldescription();
		basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}

	@Test       
	public void Verify_PLTFLOW_IntercomVendor_NonAirline_Nominated_Customer_PoReceived_Invoice_PLTTransfer_TC8(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		vendorsPage.create_IntercomVendor(vendorbeans);
		String vendorname=vendorbeans.getVendorname();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesbeans.getLocaldescription();
		basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_NominatedCheckBox_SelectCustomer();
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_IntercomVendor_NonAirline_Nominated_GateTrade_WithoutPoReceived_Invoice_PLTTransfer_TC9(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		vendorsPage.create_IntercomVendor(vendorbeans);
		String vendorname=vendorbeans.getVendorname();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_NominatedCheckBox_SelectGateTrade();
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_IntercomVendor_Airline_NonNominated_PO_TC10(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		String username="amastan@gategroup.com";
		String password="Apjak@1930";
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		vendorsPage.create_IntercomVendor(vendorbeans);
		String vendorname=vendorbeans.getVendorname();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		basicArticlesPage.create_BasicArticleNonNominated_AirLine_AssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevelForAirLine();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(0, purchaseOrderRegistrationPage.verify_AddArticleCheckbox(), statusValue, driver, sTestcaseName, "Verifying Check box for add article which should not present");
		AirlineOwnedPurchasesPage airlineOwnedPurchasesPage=purchaseOrderRegistrationPage.navigate_AirlineOwnedPurchasesSearch();
		purchaseOrderRegistrationPage.searchAndSelectVendorAirLineOwnedPurchases(vendorname, bundle.getString("connectedtovendor"));
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		purchaseOrderRegistrationPage.very_PORegistartionSubmitted(vendorname);
		customReport.customizedReport(bundle.getString("submittedmessage"), airlineOwnedPurchasesPage.verify_AirLineOwnedPurchasesPOSubmittedText(), statusValue, driver, sTestcaseName, "Verifying AirLine Owned Purchase PO submission message as Submitted");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		customReport.checkinglist(statusValue);
		//browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_IntercomVendor_Airline_Nominated_Customer_PO_TC11(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		String username="amastan@gategroup.com";
		String password="Apjak@1930";
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		vendorsPage.create_IntercomVendor(vendorbeans);
		String vendorname=vendorbeans.getVendorname();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans = new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		basicArticlesPage.create_BasicArticleNominatedCustomer_AirLine_AssignVendor(basicArticlesbeans, vendorname);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevelForAirLine();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(0, purchaseOrderRegistrationPage.verify_AddArticleCheckbox(), statusValue, driver, sTestcaseName, "Verifying Check box for add article which should not present");
		AirlineOwnedPurchasesPage airlineOwnedPurchasesPage=purchaseOrderRegistrationPage.navigate_AirlineOwnedPurchasesSearch();
		purchaseOrderRegistrationPage.searchAndSelectVendorAirLineOwnedPurchases(vendorname, bundle.getString("connectedtovendor"));
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		purchaseOrderRegistrationPage.very_PORegistartionSubmitted(vendorname);
		customReport.customizedReport(bundle.getString("submittedmessage"), airlineOwnedPurchasesPage.verify_AirLineOwnedPurchasesPOSubmittedText(), statusValue, driver, sTestcaseName, "Verifying AirLine Owned Purchase PO submission message as Submitted");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		customReport.checkinglist(statusValue);
		//browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_IntercomVendor_Airline_Nominated_GateTrade_WithoutPO_TC12(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		String username="amastan@gategroup.com";
		String password="Apjak@1930";
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		vendorsPage.create_IntercomVendor(vendorbeans);
		String vendorname=vendorbeans.getVendorname();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		basicArticlesPage.create_BasicArticleNominatedGateTrade_AirLine_AssignVendor(basicArticlesbeans, vendorname);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevelForAirLine();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(0, purchaseOrderRegistrationPage.verify_AddArticleCheckbox(), statusValue, driver, sTestcaseName, "Verifying Check box for add article which should not present");
		AirlineOwnedPurchasesPage airlineOwnedPurchasesPage=purchaseOrderRegistrationPage.navigate_AirlineOwnedPurchasesSearch();
		purchaseOrderRegistrationPage.searchAndSelectVendorAirLineOwnedPurchases(vendorname, bundle.getString("connectedtovendor"));
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		purchaseOrderRegistrationPage.very_PORegistartionSubmitted(vendorname);
		customReport.customizedReport(bundle.getString("submittedmessage"), airlineOwnedPurchasesPage.verify_AirLineOwnedPurchasesPOSubmittedText(), statusValue, driver, sTestcaseName, "Verifying AirLine Owned Purchase PO submission message as Submitted");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		customReport.checkinglist(statusValue);
		//browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_Vendor_SAPTransferFlag_Disable_NonAirline_NonNominated_PO_Invoice_TC13(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		vendorsPage.create_VendorWithSapTransferDisabled(vendorbeans);
		String vendorname=vendorbeans.getVendorname();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.checkforApprovedInvoices(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(0, vendorInvoiceEntryPage.verify_InvoicesCheckbox(), statusValue, driver, sTestcaseName, "Verifying for Invoices which should not present");
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_Vendor_SAPTransferFlag_Disable_NonAirline_Nominated_Customer_PO_Invoice_TC14(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans=new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		vendorsPage.create_VendorWithSapTransferDisabled(vendorbeans);
		String vendorname=vendorbeans.getVendorname();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans = new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_NominatedCheckBox_SelectCustomer();
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.checkforApprovedInvoices(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(0, vendorInvoiceEntryPage.verify_InvoicesCheckbox(), statusValue, driver, sTestcaseName, "Verifying for Invoices which should not present");
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_Vendor_SAPTransferFlag_Disable_NonAirline_Nominated_GateTrade_PO_Invoice_TC15() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans = new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		vendorsPage.create_VendorWithSapTransferDisabled(vendorbeans);
		String vendorname=vendorbeans.getVendorname();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans= new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_NominatedCheckBox_SelectGateTrade();
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.checkforApprovedInvoices(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(0, vendorInvoiceEntryPage.verify_InvoicesCheckbox(), statusValue, driver, sTestcaseName, "Verifying for Invoices which should not present");
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_Vendor_SAPTransferFlag_Disable_Airline_NonNominated_PO_TC16() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		String username="amastan@gategroup.com";
		String password="Apjak@1930";
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithSapTransferDisabled(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_BasicArticleNonNominated_AirLine_AssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevelForAirLine();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(0, purchaseOrderRegistrationPage.verify_AddArticleCheckbox(), statusValue, driver, sTestcaseName, "Verifying Check box for add article which should not present");
		AirlineOwnedPurchasesPage airlineOwnedPurchasesPage=purchaseOrderRegistrationPage.navigate_AirlineOwnedPurchasesSearch();
		purchaseOrderRegistrationPage.searchAndSelectVendorAirLineOwnedPurchases(vendorname, bundle.getString("connectedtovendor"));
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		purchaseOrderRegistrationPage.very_PORegistartionSubmitted(vendorname);
		customReport.customizedReport(bundle.getString("submittedmessage"), airlineOwnedPurchasesPage.verify_AirLineOwnedPurchasesPOSubmittedText(), statusValue, driver, sTestcaseName, "Verifying AirLine Owned Purchase PO submission message as Submitted");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		customReport.checkinglist(statusValue);
		//browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_Vendor_SAPTransferFlag_Disable_Airline_Nominated_Customer_PO_TC17(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		String username="amastan@gategroup.com";
		String password="Apjak@1930";
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithSapTransferDisabled(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		basicArticlesPage.create_BasicArticleNominatedCustomer_AirLine_AssignVendor(basicArticlesbeans, vendorname);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevelForAirLine();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(0, purchaseOrderRegistrationPage.verify_AddArticleCheckbox(), statusValue, driver, sTestcaseName, "Verifying Check box for add article which should not present");
		AirlineOwnedPurchasesPage airlineOwnedPurchasesPage=purchaseOrderRegistrationPage.navigate_AirlineOwnedPurchasesSearch();
		purchaseOrderRegistrationPage.searchAndSelectVendorAirLineOwnedPurchases(vendorname, bundle.getString("connectedtovendor"));
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		purchaseOrderRegistrationPage.very_PORegistartionSubmitted(vendorname);
		customReport.customizedReport(bundle.getString("submittedmessage"), airlineOwnedPurchasesPage.verify_AirLineOwnedPurchasesPOSubmittedText(), statusValue, driver, sTestcaseName, "Verifying AirLine Owned Purchase PO submission message as Submitted");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		customReport.checkinglist(statusValue);
		//browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_Vendor_SAPTransferFlag_Disable_Airline_Nominated_GateTrade_PO_TC18(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		String username="amastan@gategroup.com";
		String password="Apjak@1930";
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithSapTransferDisabled(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		basicArticlesPage.create_BasicArticleNominatedGateTrade_AirLine_AssignVendor(basicArticlesbeans, vendorname);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevelForAirLine();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(0, purchaseOrderRegistrationPage.verify_AddArticleCheckbox(), statusValue, driver, sTestcaseName, "Verifying Check box for add article which should not present");
		AirlineOwnedPurchasesPage airlineOwnedPurchasesPage=purchaseOrderRegistrationPage.navigate_AirlineOwnedPurchasesSearch();
		purchaseOrderRegistrationPage.searchAndSelectVendorAirLineOwnedPurchases(vendorname, bundle.getString("connectedtovendor"));
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		purchaseOrderRegistrationPage.very_PORegistartionSubmitted(vendorname);
		customReport.customizedReport(bundle.getString("submittedmessage"), airlineOwnedPurchasesPage.verify_AirLineOwnedPurchasesPOSubmittedText(), statusValue, driver, sTestcaseName, "Verifying AirLine Owned Purchase PO submission message as Submitted");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		customReport.checkinglist(statusValue);
		//browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_Vendor_ElectronicInterfaceSupportedFlag_Enabled_NonAirline_NonNominated_PO_Invoice_PLTTransfer_TC19(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithElectronicInterfaceSupported(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.click_ApplyChanges();
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_Vendor_ElectronicInterfaceSupportedFlag_Enabled_NonAirline_Nominated_Customer_PO_Invoice_PLTTransfer_TC20(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithElectronicInterfaceSupported(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_NominatedCheckBox_SelectCustomer();
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.click_ApplyChanges();
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_Vendor_ElectronicInterfaceSupportedFlag_Enabled_NonAirline_Nominated_GateTrade_PO_Invoice_PLTTransfer_TC21(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithElectronicInterfaceSupported(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_NominatedCheckBox_SelectGateTrade();
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.click_ApplyChanges();
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_Vendor_ElectronicInterfaceSupportedFlag_Enabled_Airline_NonNominated_PO_TC22(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		String username="amastan@gategroup.com";
		String password="Apjak@1930";
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithElectronicInterfaceSupported(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		basicArticlesPage.create_BasicArticleNonNominated_AirLine_AssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevelForAirLine();
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, bundle.getString("fromvendorpriceagreement"));
		customReport.customizedReport(0, purchaseOrderRegistrationPage.verify_AddArticleCheckbox(), statusValue, driver, sTestcaseName, "Verifying Check box for add article which should not present");
		AirlineOwnedPurchasesPage airlineOwnedPurchasesPage=purchaseOrderRegistrationPage.navigate_AirlineOwnedPurchasesSearch();
		purchaseOrderRegistrationPage.searchAndSelectVendorAirLineOwnedPurchases(vendorname, bundle.getString("connectedtovendor"));
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		purchaseOrderRegistrationPage.very_PORegistartionSubmitted(vendorname);
		customReport.customizedReport(bundle.getString("submittedmessage"), airlineOwnedPurchasesPage.verify_AirLineOwnedPurchasesPOSubmittedText(), statusValue, driver, sTestcaseName, "Verifying AirLine Owned Purchase PO submission message as Submitted");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		customReport.checkinglist(statusValue);
		//browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_Vendor_ElectronicInterfaceSupportedFlag_Enabled_Airline_Nominated_Customer_PO_TC23(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		String username="amastan@gategroup.com";
		String password="Apjak@1930";
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithElectronicInterfaceSupported(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		basicArticlesPage.create_BasicArticleNominatedCustomer_AirLine_AssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevelForAirLine();
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, bundle.getString("fromvendorpriceagreement"));
		customReport.customizedReport(0, purchaseOrderRegistrationPage.verify_AddArticleCheckbox(), statusValue, driver, sTestcaseName, "Verifying Check box for add article which should not present");
		AirlineOwnedPurchasesPage airlineOwnedPurchasesPage=purchaseOrderRegistrationPage.navigate_AirlineOwnedPurchasesSearch();
		purchaseOrderRegistrationPage.searchAndSelectVendorAirLineOwnedPurchases(vendorname, bundle.getString("connectedtovendor"));
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		purchaseOrderRegistrationPage.very_PORegistartionSubmitted(vendorname);
		customReport.customizedReport(bundle.getString("submittedmessage"), airlineOwnedPurchasesPage.verify_AirLineOwnedPurchasesPOSubmittedText(), statusValue, driver, sTestcaseName, "Verifying AirLine Owned Purchase PO submission message as Submitted");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		customReport.checkinglist(statusValue);
		//browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_Vendor_ElectronicInterfaceSupportedFlag_Enabled_Airline_Nominated_GateTrade_PO_TC24(){
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		String username="amastan@gategroup.com";
		String password="Apjak@1930";
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithElectronicInterfaceSupported(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		basicArticlesPage.create_BasicArticleNominatedGateTrade_AirLine_AssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevelForAirLine();
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, bundle.getString("fromvendorpriceagreement"));
		customReport.customizedReport(0, purchaseOrderRegistrationPage.verify_AddArticleCheckbox(), statusValue, driver, sTestcaseName, "Verifying Check box for add article which should not present");
		AirlineOwnedPurchasesPage airlineOwnedPurchasesPage=purchaseOrderRegistrationPage.navigate_AirlineOwnedPurchasesSearch();
		purchaseOrderRegistrationPage.searchAndSelectVendorAirLineOwnedPurchases(vendorname, bundle.getString("connectedtovendor"));
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		purchaseOrderRegistrationPage.very_PORegistartionSubmitted(vendorname);
		customReport.customizedReport(bundle.getString("submittedmessage"), airlineOwnedPurchasesPage.verify_AirLineOwnedPurchasesPOSubmittedText(), statusValue, driver, sTestcaseName, "Verifying AirLine Owned Purchase PO submission message as Submitted");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		customReport.checkinglist(statusValue);
		//browserQuit(driver);
	}
	
	@Test       
	public void Verify_PLTFLOW_RegularVendor_NonAirline_NonNominated_AdditionalPurchases_ExistingBA_PO_Invoice_PLTTransfer_TC25() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		basicArticlesbeans.setArticlegroup("H08-NINV PTP - Staff restaurant - cost/subsidies - Adm");
		String basicarticle=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendorWithSpecificArticleGroup(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		AdditionalPurchasesPage additionalPurchasesPage=basicArticlesPage.click_AdditionalPurchases();
		additionalPurchasesPage.add_AdditionalPurchasesForExistingBasicArticle(vendorname, basicarticle);
		String totalamount=additionalPurchasesPage.get_TotalAmount();
		logger.info("Total Amount is ::::"+totalamount);
		additionalPurchasesPage.click_navigateBack();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test
	public void Verify_PLTFLOW_RegularVendor_NonAirline_NonNominated_AdditionalPurchases_AddLineBA_PO_Invoice_PLTTransfer_TC26() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		vendorsPage.navigate_HomePage();
		homePage.select_Unit(countryUnit);
		AdditionalPurchasesPage additionalPurchasesPage=homePage.navigate_AdditionalPurchases();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		additionalPurchasesPage.add_AdditionalPurchasesForNewBasicArticle(vendorname,basicArticlesbeans);
		String totalamount=additionalPurchasesPage.get_TotalAmount();
		logger.info("Total Amount is ::::"+totalamount);
		additionalPurchasesPage.click_navigateBack();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test
	public void Verify_PLTFLOW_RegularVendor_NonAirline_NonNominated_MultipleBasicArticles_PO_Invoice_PLTTransfer_TC27() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		//customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		//basicArticlesbeans.setDayprice("200");
		String basicarticle1=basicArticlesPage.create_NonAriLine_NonNominated_BasicArticle_AssignVendor(basicArticlesbeans, vendorname);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.click_BackToSearch();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		//basicArticlesbeans.setDayprice("200");
		String basicarticle2=basicArticlesPage.create_NonAriLine_NonNominated_BasicArticle_AssignVendor(basicArticlesbeans, vendorname);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicarticle1);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.click_BackToSearch();
		basicArticlesPage.search_BasicArticle(basicarticle2);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle1, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		customReport.customizedReport(basicarticle2, purchaseOrderRegistrationPage.verify_BasicArticleNameSecond(), statusValue, driver, sTestcaseName, "Verifying Second Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addMultipleBasicArticles();
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderRecieptForMultiPleArticles(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test
	public void Verify_PLTFLOW_RegularVendor_NonAirline_NonNominated_MultiplePurchaseOrders_TwoRegularOrders_PO_Invoice_PLTTransfer_TC28() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle1=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicarticle1);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendorWithOutAddArticle(vendorname, "Connected to Vendor");
		purchaseOrderRegistrationPage.update_OrderQty();
		String ordernumer1=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer1);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer1);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		purchaseOrderRecieptPage.pageUp();
		purchaseOrderRecieptPage.pageUp();
		homePage.select_UnitFromUnit(masterUnit);
		homePage.navigate_BasicArticlePage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle2=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicarticle2);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendorWithOutAddArticle(vendorname, "Connected to Vendor");
		purchaseOrderRegistrationPage.update_OrderQtySecondArticle();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntryForMultipleBasicArticles(vendorname,"20000");
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		browserQuit(driver);
	}
	
	@Test
	public void Verify_PLTFLOW_RegularVendor_NonAirline_NonNominated_MultiplePurchaseOrders_Additional_Regular_PO_Invoice_PLTTransfer_TC29() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle1=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicarticle1);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendorWithOutAddArticle(vendorname, "Connected to Vendor");
		purchaseOrderRegistrationPage.update_OrderQty();
		String ordernumer1=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer1);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer1);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		purchaseOrderRecieptPage.pageUp();
		purchaseOrderRecieptPage.pageUp();
		homePage.select_UnitFromUnit(masterUnit);
		homePage.navigate_BasicArticlePage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		basicArticlesbeans.setArticlegroup("H08-NINV PTP - Staff restaurant - cost/subsidies - Adm");
		String basicarticle=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendorWithSpecificArticleGroup(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		AdditionalPurchasesPage additionalPurchasesPage=basicArticlesPage.click_AdditionalPurchases();
		additionalPurchasesPage.add_AdditionalPurchasesForExistingBasicArticle(vendorname, basicarticle);
		String totalamount=additionalPurchasesPage.get_TotalAmount();
		logger.info("Total Amount is ::::"+totalamount);
		additionalPurchasesPage.click_navigateBack();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntryForMultipleBasicArticles(vendorname,"20000");
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		browserQuit(driver);
	}
	
	@Test
	public void Verify_PLTFLOW_RegularVendor_NonAirline_NonNominated_PO_Invoice_PLTTransfer_AddCredit_PLTTransfer_TC30() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		String username="amastan@gategroup.com";
		String password="Apjak@1930";
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_NonAriLine_NonNominated_BasicArticle_AssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		AddCreditDebitNoteBeanPage addCreditDebitNoteBeanPage= new AddCreditDebitNoteBeanPage();
		accountBeansFactory.addCreditDebitNote(addCreditDebitNoteBeanPage);
		vendorInvoiceEntryPage.AddCreditNote(bundle.getString("addcredit-debit"), vendorname, addCreditDebitNoteBeanPage);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_VendorInvoiceEntry();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		//browserQuit(driver);
	}
	
	@Test
	public void Verify_PLTFLOW_RegularVendor_NonAirline_NonNominated_PO_Invoice_PLTTransfer_AddDebit_PLTTransfer_TC31() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_NonAriLine_NonNominated_BasicArticle_AssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		AddCreditDebitNoteBeanPage addCreditDebitNoteBeanPage= new AddCreditDebitNoteBeanPage();
		accountBeansFactory.addCreditDebitNote(addCreditDebitNoteBeanPage);
		vendorInvoiceEntryPage.AddDebitNote(bundle.getString("addcredit-debit"), vendorname, addCreditDebitNoteBeanPage);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_VendorInvoiceEntry();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
/*	@Test
	public void Verify_PLTFLOW_RegularVendor_NonAirline_NonNominated_AddDebit_TransfferredInvoices_TC32() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_NonAriLine_NonNominated_BasicArticle_AssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		AddCreditDebitNoteBeanPage addCreditDebitNoteBeanPage= new AddCreditDebitNoteBeanPage();
		accountBeansFactory.addCreditDebitNote(addCreditDebitNoteBeanPage);
		vendorInvoiceEntryPage.AddDebitNote(bundle.getString("addcredit-debit"), vendorname, addCreditDebitNoteBeanPage);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_VendorInvoiceEntry();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}*/
	
	@Test
	public void Verify_PLTFLOW_RegularVendor_NonAirline_NonNominated_Return_WithoutPO_PLTTransfer_TC32() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		String username="amastan@gategroup.com";
		String password="Apjak@1930";
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_NonAriLine_NonNominated_BasicArticle_AssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		basicArticlesPage.navigateBackward();
		basicArticlesPage.navigateBackward();
		ReturnToVendorPage returnToVendorPage=homePage.navigate_ReturnVendorPage();
		returnToVendorPage.createReturn(vendorname, "100");
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname, "10000");
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		//browserQuit(driver);
		}
	
	@Test
	public void Verify_PLTFLOW_RegularVendor_NonAirline_NonNominated_Return_WithPO_PLTTransfer_AddDedit_PLTTransfer_TC33() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		customReport.customizedReport(bundle.getString("posubmitmessage"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Sucessfully created PO toast message");
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		//vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.click_NavigateBack();
		ReturnToVendorPage returnToVendorPage=homePage.navigate_ReturnVendorPage();
		returnToVendorPage.createReturn(vendorname, "100");
		homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname, "10000");
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoiceForReturn(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAPReturn(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		AddCreditDebitNoteBeanPage addCreditDebitNoteBeanPage= new AddCreditDebitNoteBeanPage();
		accountBeansFactory.addCreditDebitNote(addCreditDebitNoteBeanPage);
		vendorInvoiceEntryPage.AddDebitNote(bundle.getString("addcredit-debit"), vendorname, addCreditDebitNoteBeanPage);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_VendorInvoiceEntry();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test
	public void Verify_PLTFLOW_RegularVendor_NonAirline_NonNominated_PO_Invoice_Credit_PLTTransfer_TC34() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_NonAriLine_NonNominated_BasicArticle_AssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		AddCreditDebitNoteBeanPage addCreditDebitNoteBeanPage= new AddCreditDebitNoteBeanPage();
		accountBeansFactory.addCreditDebitNote(addCreditDebitNoteBeanPage);
		vendorInvoiceEntryPage.AddCreditNoteBeforeInvoiceTransfer(bundle.getString("addcredit-debit"), vendorname, addCreditDebitNoteBeanPage);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_VendorInvoiceEntry();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceandCreditorDebit_CreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test
	public void Verify_PLTFLOW_RegularVendor_NonAirline_NonNominated_PO_Invoice_Debit_PLTTransfer_TC35() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_NonAriLine_NonNominated_BasicArticle_AssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendor(vendorname, "From Vendor Price Agreement");
		customReport.customizedReport(basicarticle, purchaseOrderRegistrationPage.verify_BasicArticleName(), statusValue, driver, sTestcaseName, "Verifying Basic Article name in Purchase Order Registration page");
		purchaseOrderRegistrationPage.addBasicArticle();
		purchaseOrderRegistrationPage.click_ConformationOK();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		AddCreditDebitNoteBeanPage addCreditDebitNoteBeanPage= new AddCreditDebitNoteBeanPage();
		accountBeansFactory.addCreditDebitNote(addCreditDebitNoteBeanPage);
		vendorInvoiceEntryPage.AddDebitNoteBeforeInvoiceTransfer(bundle.getString("addcredit-debit"), vendorname, addCreditDebitNoteBeanPage);
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_VendorInvoiceEntry();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceandCreditorDebit_CreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test
	public void Verify_PLTFLOW_RegularVendor_NonAirline_NonNominated_SplitPO_ArticleQuantity_Invoice_PLTTransfer_TC36() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), vendorsPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for vendor creation");
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		customReport.customizedReport(bundle.getString("vendorsuccessfulcreation"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		customReport.customizedReport(bundle.getString("updatedsucessfullymsg"), basicArticlesPage.getText(VendorsPageObjects.toastmessage), statusValue, driver, sTestcaseName, "Verifying Created Sucessfully toast message for Basic Article creation");
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendorWithOutAddArticle(vendorname, "Connected to Vendor");
		purchaseOrderRegistrationPage.update_OrderQty();
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderRecieptSplitQty(vendorname,"50");
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Submitted Message");
		customReport.customizedReport(ordernumer, purchaseOrderRecieptPage.get_OrderNumber2(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieved Message");
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_SecondStatus(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieved Message");
		purchaseOrderRecieptPage.submit_OrderForSecondOrder("50");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntryForMultipleBasicArticles(vendorname,"10000");
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test
	public void Verify_PLTFLOW_RegularVendor_NonAirline_NonNominated_SplitPO_Article_Invoice_PLTTransfer_TC37() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle1=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		basicArticlesPage.pause(5000);
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle2=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicarticle1);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		basicArticlesPage.click_BackToSearch();
		basicArticlesPage.search_BasicArticle(basicarticle2);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendorForMultiplePO(vendorname, "Connected to Vendor");
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		purchaseOrderRegistrationPage.verfy_OrderSubmission(ordernumer);
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRegistrationPage.verify_SubmitText(), statusValue, driver, sTestcaseName, "Verifying Order Sucessfully submission message");
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderRecieptForSplitArticle(vendorname,"100");
		customReport.customizedReport(bundle.getString("submittedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Submitted Message");
		customReport.customizedReport(ordernumer, purchaseOrderRecieptPage.get_OrderNumber2(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieved Message");
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_SecondStatus(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieved Message");
		purchaseOrderRecieptPage.submit_OrderForSecondOrder("100");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntryForMultipleBasicArticles(vendorname,"20000");
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	@Test
	public void Verify_PLTFLOW_RegularVendor_NonAirline_NonNominated_PO_Invoice_AdditionalCosts_PLTTransfer_TC38() {
		sTestcaseName = new Object() {}.getClass().getEnclosingMethod().getName();
		logger.info("The Test Case Name is ::::::::"+sTestcaseName);
		WebDriver driver=initializeDriver(browser);
		driver.manage().window().maximize();
		launchURL(surl, driver);
		basePage = new BasePage(driver, customReport,new BasePage());
		loginpage=basePage.loginpage(driver, customReport, basePage);
		HomePage homePage = loginpage.login(username, password);
		homePage.select_Master(masterUnit);
		VendorsPage vendorsPage=homePage.navigate_VendorsPage();
		VendorBeanPage vendorbeans= new VendorBeanPage();
		accountBeansFactory.createVendorBeans(vendorbeans);
		String vendorname=vendorsPage.create_VendorWithManditFields(vendorbeans);
		BasicArticlesPage basicArticlesPage=vendorsPage.navigate_BasicArticleFromVendors();
		BasicArticlesBeanPage basicArticlesbeans=new BasicArticlesBeanPage();
		accountBeansFactory.createBasicArticle(basicArticlesbeans);
		String basicarticle=basicArticlesPage.create_BasicArticle_NonNominatedAndAssignVendor(basicArticlesbeans, vendorname);
		basicArticlesPage.click_ApplyChanges();
		basicArticlesPage.select_Unit(countryUnit);
		homePage.navigate_BasicArticlePage();
		basicArticlesPage.search_BasicArticle(basicArticlesbeans);
		basicArticlesPage.assign_SubStoreBasicArticleUnitLevel();
		PurchaseOrderRegistrationPage purchaseOrderRegistrationPage=basicArticlesPage.navigate_PurchaseOrderRegistration();
		purchaseOrderRegistrationPage.searchAndSelectVendorWithOutAddArticle(vendorname, "Connected to Vendor");
		purchaseOrderRegistrationPage.submitOrderWithoutAddArticle("100");
		String ordernumer=purchaseOrderRegistrationPage.getOrderNumber();
		logger.info("The Order Number is ::::"+ordernumer);
		String totalamount=purchaseOrderRegistrationPage.get_TotalAmount();
		logger.info("The Total Amount is  ::::"+totalamount);
		purchaseOrderRegistrationPage.click_NavigateBack();
		PurchaseOrderRecieptPage purchaseOrderRecieptPage=homePage.navigate_PurchaseOrderRecieptPage();
		purchaseOrderRecieptPage.submit_OrderReciept(vendorname);
		customReport.customizedReport(bundle.getString("recievedmessage"), purchaseOrderRecieptPage.verify_Status(), statusValue, driver, sTestcaseName, "Verifying Purchase Order Reciept Recieve Message");
		purchaseOrderRecieptPage.click_NavigateBackButton();
		VendorInvoiceEntryPage vendorInvoiceEntryPage=homePage.navigate_VendorInvoiceEntry();
		vendorInvoiceEntryPage.enter_InvoiceEntry(vendorname,totalamount);
		vendorInvoiceEntryPage.verify_LineItemDifferenceText();
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.Add_AdditionalCosts(vendorname, "100","10100");
		customReport.customizedReport("0.00", vendorInvoiceEntryPage.verify_LineItemDifferenceText(), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.click_BackButton();
		vendorInvoiceEntryPage.select_MenuItems(bundle.getString("postingreport"));
		vendorInvoiceEntryPage.CreatePostingReportForSelectedInvoice(vendorname,bundle.getString("postingreport"));
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_label(bundle.getString("successfullycreatedmsg")), statusValue, driver, sTestcaseName, "Verifying Line Item Different should be 0.00");
		vendorInvoiceEntryPage.TransferInvoiceCreatePLTforSAP(bundle.getString("transfervendorinvoice"), vendorname);
		customReport.customizedReport(bundle.getString("successfullycreatedmsg"), vendorInvoiceEntryPage.verify_PLTSuccessfullyCreated(), statusValue, driver, sTestcaseName, "Verifying PLT Submitted Successfully Created message");
		vendorInvoiceEntryPage.accept_SuccessfullPopup();
		customReport.checkinglist(statusValue);
		browserQuit(driver);
	}
	
	
	
	//@AfterMethod(alwaysRun = true)
	public void browserClose(ITestResult result) {
		logger.info("In After method class");
		statusValue.clear();
		
		if (!result.isSuccess()) {
			Reporter.log("Screen shot for failed Test Case"+ customReport.AssertionresultOutput(driver, sTestcaseName));
		}
		//browserQuit();
	}	
	

}
